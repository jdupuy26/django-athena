# Generated by Django 3.0.3 on 2020-02-14 02:04
import django.contrib.postgres.fields.jsonb
import django.db.models.deletion
from django.db import migrations
from django.db import models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Code",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "path",
                    models.CharField(
                        default="/home/jdupuy26/Projects/athena-webinterface/django-athena/djath/mycode",
                        help_text="Select where to place this code.",
                        max_length=500,
                    ),
                ),
                ("name", models.CharField(help_text="Enter a name for this code.", max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name="Repo",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        default="", help_text="Enter the name for the repo", max_length=100
                    ),
                ),
                (
                    "url",
                    models.URLField(
                        default="", help_text="Enter the url for the GH repo", max_length=500
                    ),
                ),
                (
                    "data",
                    django.contrib.postgres.fields.jsonb.JSONField(
                        blank=True,
                        help_text="Enter any additional data about the as a dict",
                        null=True,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Fork",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        default="", help_text="Enter the name for the fork", max_length=100
                    ),
                ),
                (
                    "url",
                    models.URLField(
                        default="", help_text="Enter the url for the GH fork", max_length=500
                    ),
                ),
                (
                    "data",
                    django.contrib.postgres.fields.jsonb.JSONField(
                        blank=True,
                        help_text="Enter any additional data about the as a dict",
                        null=True,
                    ),
                ),
                (
                    "code",
                    models.OneToOneField(
                        help_text="Select a code for this fork",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="athena_code.Code",
                    ),
                ),
                (
                    "repo",
                    models.ForeignKey(
                        help_text="Select a repo for this fork",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="athena_code.Repo",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Configuration",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "input_file",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Enter the input file for this configuration.",
                        max_length=500,
                    ),
                ),
                (
                    "input_dict",
                    django.contrib.postgres.fields.jsonb.JSONField(
                        blank=True,
                        help_text="Enter the input file for this problem as a dictionary.The root keys should be the blocks of the input_file.",
                        null=True,
                    ),
                ),
                (
                    "prob",
                    models.CharField(
                        default="blast", help_text="Select a problem to configure", max_length=100
                    ),
                ),
                (
                    "coords",
                    models.CharField(
                        choices=[
                            ("cartesian", "Cartesian"),
                            ("cylindrical", "Cylindrical"),
                            ("spherical_polar", "Spherical Polar"),
                            ("minkowski", "Minkowski"),
                            ("sinusoidal", "Sinusoidal"),
                            ("tilted", "Tilted"),
                            ("schwarzschild", "Schwarzchild Metric"),
                            ("kerr-schild", "Kerr-Schild Metric"),
                            ("gr_user", "GR User Metric"),
                        ],
                        default="cartesian",
                        help_text="Select a coordinate system",
                        max_length=100,
                    ),
                ),
                (
                    "eos",
                    models.CharField(
                        choices=[("adiabatic", "Adiabatic"), ("Isothermal", "Isothermal")],
                        default="adiabatic",
                        help_text="Select an equation of state",
                        max_length=100,
                    ),
                ),
                (
                    "flux",
                    models.CharField(
                        choices=[
                            ("default", "Default (depends on other fields)"),
                            ("hlle", "Hartan, Lax, van Leer, Einfeldt (HLLE)"),
                            ("hllc", "Hartan, Lax, van Leer, Contact (HLLC)"),
                            ("hlld", "Hartan, Lax, van Leer, Discontinuities (HLLD)"),
                            ("roe", "Roe Solver"),
                            ("llf", "LLF Solver"),
                        ],
                        default="default",
                        help_text="Select Riemann solver",
                        max_length=100,
                    ),
                ),
                (
                    "fluxcl",
                    models.CharField(
                        choices=[
                            ("hlle", "Hartan, Lax, van Leer, Einfeldt (HLLE)"),
                            ("roe", "Roe Solver"),
                        ],
                        default="roe",
                        help_text="Select Riemann solver for the collisionless variables",
                        max_length=100,
                    ),
                ),
                (
                    "grav",
                    models.CharField(
                        choices=[
                            ("none", "No self-gravity"),
                            ("fft", "Fast Fourier Transform"),
                            ("fft_cyl", "Fast Fourier Transform in Cylindrical Coords"),
                        ],
                        default="none",
                        help_text="Select a self-gravity solver.",
                        max_length=100,
                    ),
                ),
                ("nscalars", models.IntegerField(default=0, help_text="Enter number of scalars")),
                (
                    "nghost",
                    models.IntegerField(default=2, help_text="Enter the number of ghost zones"),
                ),
                ("bfield", models.BooleanField(default=False, help_text="Enable magnetic fields?")),
                (
                    "cless",
                    models.BooleanField(default=False, help_text="Enable collisionless solver?"),
                ),
                (
                    "cless_only",
                    models.BooleanField(default=False, help_text="Enable collisionless-only mode?"),
                ),
                (
                    "spec_rel",
                    models.BooleanField(default=False, help_text="Enable special relativity?"),
                ),
                (
                    "gen_rel",
                    models.BooleanField(default=False, help_text="Enable general relativity?"),
                ),
                (
                    "transforms",
                    models.BooleanField(
                        default=False, help_text="Enable interface frame transformations for GR?"
                    ),
                ),
                ("shear", models.BooleanField(default=False, help_text="Enable shearing box?")),
                (
                    "dual_energy",
                    models.BooleanField(default=False, help_text="Enable dual energy?"),
                ),
                ("debug", models.BooleanField(default=False, help_text="Enable debug mode?")),
                (
                    "float_precision",
                    models.BooleanField(default=False, help_text="Enable single precision?"),
                ),
                (
                    "openmp",
                    models.BooleanField(
                        default=False, help_text="Enable parallelization with OpenMP?"
                    ),
                ),
                (
                    "mpi",
                    models.BooleanField(
                        default=False, help_text="Enable parallelization with MPI?"
                    ),
                ),
                (
                    "fft",
                    models.BooleanField(default=False, help_text="Enable fast fourier transform?"),
                ),
                (
                    "fftw_path",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Enter path to FFTW libraries",
                        max_length=100,
                    ),
                ),
                ("hdf5", models.BooleanField(default=False, help_text="Enable HDF5 Output")),
                (
                    "hdf5_path",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Enter path to HDF5 libraries",
                        max_length=100,
                    ),
                ),
                (
                    "cxx",
                    models.CharField(
                        choices=[
                            ("g++", "g++"),
                            ("g++-simd", "g++-simd"),
                            ("icc", "icc-debug"),
                            ("cray", "cray"),
                            ("bgxl", "bgxl"),
                            ("icc-phi", "icc-phi"),
                            ("clang++", "clang++"),
                            ("clang++-simd", "clang++-simd"),
                        ],
                        default="g++",
                        help_text="Select C++ compiler",
                        max_length=100,
                    ),
                ),
                (
                    "ccmd",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Override for command to used to call C++ compiler",
                        max_length=100,
                    ),
                ),
                (
                    "cflag",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Addition str of flags to append to compiler/linker call",
                        max_length=100,
                    ),
                ),
                (
                    "include",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="use -Ipath when compiling",
                        max_length=500,
                    ),
                ),
                (
                    "lib",
                    models.CharField(
                        blank=True, default="", help_text="use -Lpath when linking", max_length=500
                    ),
                ),
                (
                    "code",
                    models.ForeignKey(
                        help_text="Select code for this configuration",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="athena_code.Code",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Branch",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        default="", help_text="Enter the name for the branch", max_length=100
                    ),
                ),
                (
                    "data",
                    django.contrib.postgres.fields.jsonb.JSONField(
                        blank=True,
                        help_text="Enter any additional data about the as a dict",
                        null=True,
                    ),
                ),
                (
                    "fork",
                    models.ForeignKey(
                        help_text="Select a fork for this branch",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="athena_code.Fork",
                    ),
                ),
                (
                    "repo",
                    models.ForeignKey(
                        help_text="Select a repo for this branch",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="athena_code.Repo",
                    ),
                ),
            ],
        ),
    ]
